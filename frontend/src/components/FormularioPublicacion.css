import React, { useState, useEffect } from "react";
import axios from "axios";
import './FormularioPublicacion.css'; // Importa el archivo CSS para los estilos

function FormularioPublicacion({ onPublicar }) {
  const [formulario, setFormulario] = useState({
    titulo: "",
    descripcion: "",
    email: "",
    whatsapp: "",
    zona: "",
  });

  // Estado para los archivos de imagen reales que se enviar√°n al backend
  const [selectedFiles, setSelectedFiles] = useState([]);
  // Estado para las URLs de previsualizaci√≥n de las im√°genes
  const [imagePreviews, setImagePreviews] = useState([]);
  // Estado para el mensaje de error del l√≠mite de im√°genes
  const [imageLimitMessage, setImageLimitMessage] = useState('');

  const [enviado, setEnviado] = useState(false);
  const [error, setError] = useState(false);

  const MAX_IMAGES = 3; // L√≠mite m√°ximo de im√°genes

  const handleChange = (e) => {
    setFormulario({
      ...formulario,
      [e.target.name]: e.target.value,
    });
  };

  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    const newFiles = [];
    const newPreviews = [];

    setImageLimitMessage(''); // Limpiar cualquier mensaje de error previo

    if (files.length > MAX_IMAGES) {
      setImageLimitMessage(`Solo puedes subir un m√°ximo de ${MAX_IMAGES} im√°genes.`);
      // Opcional: podr√≠as limpiar el input file para evitar que el usuario piense que se subieron
      e.target.value = null; // Esto limpia la selecci√≥n visual del input file
      setSelectedFiles([]); // Vaciar los archivos seleccionados
      setImagePreviews([]); // Vaciar las previsualizaciones
      return;
    }

    files.forEach(file => {
      if (file.type.startsWith('image/')) {
        newFiles.push(file);
        newPreviews.push(URL.createObjectURL(file)); // Crea una URL temporal para la previsualizaci√≥n
      }
    });

    setSelectedFiles(newFiles);
    setImagePreviews(newPreviews);
  };

  const handleRemoveImage = (indexToRemove) => {
    // Eliminar la imagen del array de archivos seleccionados
    const updatedSelectedFiles = selectedFiles.filter((_, index) => index !== indexToRemove);
    setSelectedFiles(updatedSelectedFiles);

    // Eliminar la URL de previsualizaci√≥n correspondiente
    const updatedImagePreviews = imagePreviews.filter((_, index) => index !== indexToRemove);
    setImagePreviews(updatedImagePreviews);

    // Limpiar el mensaje de l√≠mite si se reduce la cantidad
    if (updatedSelectedFiles.length < MAX_IMAGES) {
      setImageLimitMessage('');
    }
    // No es necesario resetear el input `type="file"` del DOM aqu√≠,
    // ya que estamos controlando los archivos con el estado `selectedFiles`.
  };

  // Limpiar las URLs de objeto cuando el componente se desmonte o las im√°genes cambien
  useEffect(() => {
    return () => {
      imagePreviews.forEach(url => URL.revokeObjectURL(url));
    };
  }, [imagePreviews]); // Se ejecuta cuando imagePreviews cambia o al desmontar

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(false);
    setEnviado(false);

    // Validaci√≥n final antes de enviar
    if (selectedFiles.length === 0) {
      setImageLimitMessage('Por favor, selecciona al menos una imagen.');
      return;
    }
    if (selectedFiles.length > MAX_IMAGES) {
      setImageLimitMessage(`Solo puedes subir un m√°ximo de ${MAX_IMAGES} im√°genes.`);
      return;
    }

    try {
      const formData = new FormData();

      // A√±adir campos de texto
      Object.entries(formulario).forEach(([key, value]) => {
        formData.append(key, value);
      });

      // A√±adir im√°genes
      selectedFiles.forEach((img) => formData.append("imagenes", img)); // Usar selectedFiles

      await axios.post(`${import.meta.env.VITE_API_URL}/publicaciones`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });

      setEnviado(true);
      // Limpiar el formulario y los estados de imagen despu√©s del env√≠o exitoso
      setFormulario({
        titulo: "",
        descripcion: "",
        email: "",
        whatsapp: "",
        zona: "",
      });
      setSelectedFiles([]);
      setImagePreviews([]);
      setImageLimitMessage(''); // Limpiar el mensaje de l√≠mite

      if (onPublicar) onPublicar();
    } catch (err) {
      console.error("Error al publicar:", err);
      setError(true);
    }
  };

  return (
    <div className="mt-5">
      <h2 className="text-center mb-4">üìù Publicar habitaci√≥n o apartaestudio</h2>

      {enviado && <div className="alert alert-success">‚úÖ ¬°Publicaci√≥n enviada correctamente!</div>}
      {error && <div className="alert alert-danger">‚ùå Error al enviar publicaci√≥n.</div>}

      <form onSubmit={handleSubmit} encType="multipart/form-data">
        <div className="mb-3">
          <label className="form-label">T√≠tulo</label>
          <input
            type="text"
            className="form-control"
            name="titulo"
            value={formulario.titulo}
            onChange={handleChange}
            required
          />
        </div>

        <div className="mb-3">
          <label className="form-label">Zona o localidad</label>
          <select
            className="form-select"
            name="zona"
            value={formulario.zona}
            onChange={handleChange}
            required
          >
            <option value="">Seleccione una zona</option>

            <optgroup label="üìç Bogot√° - Zona Norte">
              <option value="Usaqu√©n">Usaqu√©n</option>
              <option value="Chapinero">Chapinero</option>
              <option value="Suba">Suba</option>
              <option value="Barrios Unidos">Barrios Unidos</option>
              <option value="Teusaquillo (norte)">Teusaquillo (norte)</option>
            </optgroup>

            <optgroup label="üìç Bogot√° - Zona Sur">
              <option value="Bosa">Bosa</option>
              <option value="Kennedy (sur)">Kennedy (sur)</option>
              <option value="Tunjuelito">Tunjuelito</option>
              <option value="Ciudad Bol√≠var">Ciudad Bol√≠var</option>
              <option value="Rafael Uribe Uribe">Rafael Uribe Uribe</option>
              <option value="San Crist√≥bal">San Crist√≥bal</option>
              <option value="Usme">Usme</option>
            </optgroup>

            <optgroup label="üìç Bogot√° - Zona Occidente">
              <option value="Engativ√°">Engativ√°</option>
              <option value="Fontib√≥n">Fontib√≥n</option>
              <option value="Kennedy (norte)">Kennedy (norte)</option>
              <option value="Teusaquillo (occidente)">Teusaquillo (occidente)</option>
            </optgroup>

            <optgroup label="üìç Bogot√° - Zona Oriente">
              <option value="Santa Fe">Santa Fe</option>
              <option value="La Candelaria">La Candelaria</option>
              <option value="San Crist√≥bal (oriente)">San Crist√≥bal (oriente)</option>
              <option value="Usaqu√©n (oriente)">Usaqu√©n (oriente)</option>
            </optgroup>

            <optgroup label="üèûÔ∏è Municipios - Zona Norte">
              <option value="Ch√≠a">Ch√≠a</option>
              <option value="Cajic√°">Cajic√°</option>
              <option value="Zipaquir√°">Zipaquir√°</option>
              <option value="Tocancip√°">Tocancip√°</option>
              <option value="Sop√≥">Sop√≥</option>
              <option value="La Calera">La Calera</option>
            </optgroup>

            <optgroup label="üèûÔ∏è Municipios - Zona Sur">
              <option value="Soacha">Soacha</option>
              <option value="Sibat√©">Sibat√©</option>
              <option value="Pasca">Pasca</option>
              <option value="Fusagasug√°">Fusagasug√°</option>
              <option value="Granada">Granada</option>
            </optgroup>

            <optgroup label="üèûÔ∏è Municipios - Zona Occidente">
              <option value="Mosquera">Mosquera</option>
              <option value="Funza">Funza</option>
              <option value="Madrid">Madrid</option>
              <option value="Facatativ√°">Facatativ√°</option>
              <option value="El Rosal">El Rosal</option>
              <option value="Bojac√°">Bojac√°</option>
              <option value="Zipac√≥n">Zipac√≥n</option>
            </optgroup>

            <optgroup label="üèûÔ∏è Municipios - Zona Oriente">
              <option value="Choach√≠">Choach√≠</option>
              <option value="Ubaque">Ubaque</option>
              <option value="F√≥meque">F√≥meque</option>
              <option value="Chipaque">Chipaque</option>
              <option value="Guasca">Guasca</option>
            </optgroup>
          </select>
        </div>

        <div className="mb-3">
          <label className="form-label">Descripci√≥n</label>
          <textarea
            className="form-control"
            name="descripcion"
            value={formulario.descripcion}
            onChange={handleChange}
            rows="3"
            required
          ></textarea>
        </div>

        <div className="mb-3">
          <label className="form-label">Correo electr√≥nico</label>
          <input
            type="email"
            className="form-control"
            name="email"
            value={formulario.email}