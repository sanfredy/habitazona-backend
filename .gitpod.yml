# .gitpod.yml

# Usamos una imagen de Gitpod optimizada para entornos Node.js
# Esto ya incluye Node.js, npm, yarn y otras herramientas comunes.
image: gitpod/workspace-full-node

# Define las tareas que se ejecutarán en tu espacio de trabajo.
# Tendremos una tarea para configurar y ejecutar tu backend.
tasks:
  - name: Setup & Start Backend
    # 'init' se ejecuta una sola vez cuando el espacio de trabajo se inicia por primera vez.
    # Aquí nos aseguramos de que estamos en la carpeta correcta y luego instalamos las dependencias.
    init: |
      echo "Navegando a la carpeta del servidor..."
      # Importante: Asumiendo que tu 'package.json' está dentro de una carpeta llamada 'server'
      # Si tu 'package.json' está en la raíz del repositorio, ELIMINA la línea 'cd server'
      cd server
      echo "Instalando dependencias de Node.js (npm install)..."
      npm install
      echo "Dependencias de Node.js instaladas."

    # 'command' se ejecuta cada vez que el terminal de esta tarea se abre o se reinicia.
    # Aquí iniciamos tu servidor backend usando el script 'dev' definido en tu package.json.
    command: |
      echo "Navegando a la carpeta del servidor..."
      # De nuevo, si tu 'package.json' está en la raíz, ELIMINA la línea 'cd server'
      cd server
      echo "Iniciando servidor Node.js (npm run dev)..."
      npm run dev
      echo "Servidor Node.js iniciado y listo para recibir conexiones."

# Define los puertos que tu aplicación backend expone.
# Por defecto, Express suele usar el puerto 3000 si no se especifica otro.
# Si tu backend usa un puerto diferente (ej. 8080, 5000), cámbialo aquí.
ports:
  - port: 3000 # Puerto típico para aplicaciones Express. Verifica tu código si usa otro.
    onOpen: open-browser # Gitpod abrirá automáticamente una nueva pestaña del navegador en este puerto.
    visibility: public # Hace que el puerto sea accesible desde fuera del espacio de trabajo.

# Opcional: Configuración para pre-construcciones (prebuilds)
# Los prebuilds aceleran el tiempo de inicio de los espacios de trabajo
# al ejecutar la fase 'init' por adelantado.
# Esto es muy recomendable para proyectos grandes o si muchos usuarios inician el mismo repo.
# Si no quieres usar prebuilds por ahora, puedes comentar o eliminar esta sección.
github:
  prebuilds:
    # Habilita prebuilds para la rama principal (main/master)
    main: true
    # También puedes habilitarlos para todas las ramas o pull requests si lo deseas.
    # branches: true
    # pullRequests: true
    # pullRequestsFromForks: false
